// Code generated by mockery v2.20.0. DO NOT EDIT.

package gw_cache

import mock "github.com/stretchr/testify/mock"

// MockCompressorI is an autogenerated mock type for the CompressorI type
type MockCompressorI struct {
	mock.Mock
}

type MockCompressorI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCompressorI) EXPECT() *MockCompressorI_Expecter {
	return &MockCompressorI_Expecter{mock: &_m.Mock}
}

// Compress provides a mock function with given fields: _a0
func (_m *MockCompressorI) Compress(_a0 []byte) ([]byte, error) {
	ret := _m.Called(_a0)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCompressorI_Compress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Compress'
type MockCompressorI_Compress_Call struct {
	*mock.Call
}

// Compress is a helper method to define mock.On call
//   - _a0 []byte
func (_e *MockCompressorI_Expecter) Compress(_a0 interface{}) *MockCompressorI_Compress_Call {
	return &MockCompressorI_Compress_Call{Call: _e.mock.On("Compress", _a0)}
}

func (_c *MockCompressorI_Compress_Call) Run(run func(_a0 []byte)) *MockCompressorI_Compress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockCompressorI_Compress_Call) Return(_a0 []byte, _a1 error) *MockCompressorI_Compress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCompressorI_Compress_Call) RunAndReturn(run func([]byte) ([]byte, error)) *MockCompressorI_Compress_Call {
	_c.Call.Return(run)
	return _c
}

// Decompress provides a mock function with given fields: _a0
func (_m *MockCompressorI) Decompress(_a0 []byte) ([]byte, error) {
	ret := _m.Called(_a0)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCompressorI_Decompress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decompress'
type MockCompressorI_Decompress_Call struct {
	*mock.Call
}

// Decompress is a helper method to define mock.On call
//   - _a0 []byte
func (_e *MockCompressorI_Expecter) Decompress(_a0 interface{}) *MockCompressorI_Decompress_Call {
	return &MockCompressorI_Decompress_Call{Call: _e.mock.On("Decompress", _a0)}
}

func (_c *MockCompressorI_Decompress_Call) Run(run func(_a0 []byte)) *MockCompressorI_Decompress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockCompressorI_Decompress_Call) Return(_a0 []byte, _a1 error) *MockCompressorI_Decompress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCompressorI_Decompress_Call) RunAndReturn(run func([]byte) ([]byte, error)) *MockCompressorI_Decompress_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockCompressorI interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockCompressorI creates a new instance of MockCompressorI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockCompressorI(t mockConstructorTestingTNewMockCompressorI) *MockCompressorI {
	mock := &MockCompressorI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
