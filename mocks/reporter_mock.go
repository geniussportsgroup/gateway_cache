// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Reporter is an autogenerated mock type for the Reporter type
type Reporter struct {
	mock.Mock
}

type Reporter_Expecter struct {
	mock *mock.Mock
}

func (_m *Reporter) EXPECT() *Reporter_Expecter {
	return &Reporter_Expecter{mock: &_m.Mock}
}

// ReportHit provides a mock function with given fields:
func (_m *Reporter) ReportHit() {
	_m.Called()
}

// Reporter_ReportHit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportHit'
type Reporter_ReportHit_Call struct {
	*mock.Call
}

// ReportHit is a helper method to define mock.On call
func (_e *Reporter_Expecter) ReportHit() *Reporter_ReportHit_Call {
	return &Reporter_ReportHit_Call{Call: _e.mock.On("ReportHit")}
}

func (_c *Reporter_ReportHit_Call) Run(run func()) *Reporter_ReportHit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Reporter_ReportHit_Call) Return() *Reporter_ReportHit_Call {
	_c.Call.Return()
	return _c
}

func (_c *Reporter_ReportHit_Call) RunAndReturn(run func()) *Reporter_ReportHit_Call {
	_c.Call.Return(run)
	return _c
}

// ReportMiss provides a mock function with given fields:
func (_m *Reporter) ReportMiss() {
	_m.Called()
}

// Reporter_ReportMiss_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportMiss'
type Reporter_ReportMiss_Call struct {
	*mock.Call
}

// ReportMiss is a helper method to define mock.On call
func (_e *Reporter_Expecter) ReportMiss() *Reporter_ReportMiss_Call {
	return &Reporter_ReportMiss_Call{Call: _e.mock.On("ReportMiss")}
}

func (_c *Reporter_ReportMiss_Call) Run(run func()) *Reporter_ReportMiss_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Reporter_ReportMiss_Call) Return() *Reporter_ReportMiss_Call {
	_c.Call.Return()
	return _c
}

func (_c *Reporter_ReportMiss_Call) RunAndReturn(run func()) *Reporter_ReportMiss_Call {
	_c.Call.Return(run)
	return _c
}

// NewReporter creates a new instance of Reporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReporter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Reporter {
	mock := &Reporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
