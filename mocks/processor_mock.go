// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	models "github.com/geniussportsgroup/gateway_cache/v2/models"
	mock "github.com/stretchr/testify/mock"
)

// ProcessorI is an autogenerated mock type for the ProcessorI type
type ProcessorI[K interface{}, T interface{}] struct {
	mock.Mock
}

type ProcessorI_Expecter[K interface{}, T interface{}] struct {
	mock *mock.Mock
}

func (_m *ProcessorI[K, T]) EXPECT() *ProcessorI_Expecter[K, T] {
	return &ProcessorI_Expecter[K, T]{mock: &_m.Mock}
}

// CacheMissSolver provides a mock function with given fields: _a0
func (_m *ProcessorI[K, T]) CacheMissSolver(_a0 K) (T, *models.RequestError) {
	ret := _m.Called(_a0)

	var r0 T
	var r1 *models.RequestError
	if rf, ok := ret.Get(0).(func(K) (T, *models.RequestError)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(K) T); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(K) *models.RequestError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.RequestError)
		}
	}

	return r0, r1
}

// ProcessorI_CacheMissSolver_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CacheMissSolver'
type ProcessorI_CacheMissSolver_Call[K interface{}, T interface{}] struct {
	*mock.Call
}

// CacheMissSolver is a helper method to define mock.On call
//   - _a0 K
func (_e *ProcessorI_Expecter[K, T]) CacheMissSolver(_a0 interface{}) *ProcessorI_CacheMissSolver_Call[K, T] {
	return &ProcessorI_CacheMissSolver_Call[K, T]{Call: _e.mock.On("CacheMissSolver", _a0)}
}

func (_c *ProcessorI_CacheMissSolver_Call[K, T]) Run(run func(_a0 K)) *ProcessorI_CacheMissSolver_Call[K, T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(K))
	})
	return _c
}

func (_c *ProcessorI_CacheMissSolver_Call[K, T]) Return(_a0 T, _a1 *models.RequestError) *ProcessorI_CacheMissSolver_Call[K, T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProcessorI_CacheMissSolver_Call[K, T]) RunAndReturn(run func(K) (T, *models.RequestError)) *ProcessorI_CacheMissSolver_Call[K, T] {
	_c.Call.Return(run)
	return _c
}

// ToMapKey provides a mock function with given fields: _a0
func (_m *ProcessorI[K, T]) ToMapKey(_a0 K) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(K) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(K) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(K) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessorI_ToMapKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToMapKey'
type ProcessorI_ToMapKey_Call[K interface{}, T interface{}] struct {
	*mock.Call
}

// ToMapKey is a helper method to define mock.On call
//   - _a0 K
func (_e *ProcessorI_Expecter[K, T]) ToMapKey(_a0 interface{}) *ProcessorI_ToMapKey_Call[K, T] {
	return &ProcessorI_ToMapKey_Call[K, T]{Call: _e.mock.On("ToMapKey", _a0)}
}

func (_c *ProcessorI_ToMapKey_Call[K, T]) Run(run func(_a0 K)) *ProcessorI_ToMapKey_Call[K, T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(K))
	})
	return _c
}

func (_c *ProcessorI_ToMapKey_Call[K, T]) Return(_a0 string, _a1 error) *ProcessorI_ToMapKey_Call[K, T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProcessorI_ToMapKey_Call[K, T]) RunAndReturn(run func(K) (string, error)) *ProcessorI_ToMapKey_Call[K, T] {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewProcessorI interface {
	mock.TestingT
	Cleanup(func())
}

// NewProcessorI creates a new instance of ProcessorI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProcessorI[K interface{}, T interface{}](t mockConstructorTestingTNewProcessorI) *ProcessorI[K, T] {
	mock := &ProcessorI[K, T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
