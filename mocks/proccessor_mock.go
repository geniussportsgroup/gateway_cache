// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	models "github.com/geniussportsgroup/gateway_cache/models"
	mock "github.com/stretchr/testify/mock"
)

// ProccessorI is an autogenerated mock type for the ProccessorI type
type ProccessorI[T interface{}, K interface{}] struct {
	mock.Mock
}

type ProccessorI_Expecter[T interface{}, K interface{}] struct {
	mock *mock.Mock
}

func (_m *ProccessorI[T, K]) EXPECT() *ProccessorI_Expecter[T, K] {
	return &ProccessorI_Expecter[T, K]{mock: &_m.Mock}
}

// CallUServices provides a mock function with given fields: _a0
func (_m *ProccessorI[T, K]) CallUServices(_a0 T) (K, *models.RequestError) {
	ret := _m.Called(_a0)

	var r0 K
	var r1 *models.RequestError
	if rf, ok := ret.Get(0).(func(T) (K, *models.RequestError)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(T) K); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(K)
	}

	if rf, ok := ret.Get(1).(func(T) *models.RequestError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.RequestError)
		}
	}

	return r0, r1
}

// ProccessorI_CallUServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallUServices'
type ProccessorI_CallUServices_Call[T interface{}, K interface{}] struct {
	*mock.Call
}

// CallUServices is a helper method to define mock.On call
//   - _a0 T
func (_e *ProccessorI_Expecter[T, K]) CallUServices(_a0 interface{}) *ProccessorI_CallUServices_Call[T, K] {
	return &ProccessorI_CallUServices_Call[T, K]{Call: _e.mock.On("CallUServices", _a0)}
}

func (_c *ProccessorI_CallUServices_Call[T, K]) Run(run func(_a0 T)) *ProccessorI_CallUServices_Call[T, K] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T))
	})
	return _c
}

func (_c *ProccessorI_CallUServices_Call[T, K]) Return(_a0 K, _a1 *models.RequestError) *ProccessorI_CallUServices_Call[T, K] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProccessorI_CallUServices_Call[T, K]) RunAndReturn(run func(T) (K, *models.RequestError)) *ProccessorI_CallUServices_Call[T, K] {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewProccessorI interface {
	mock.TestingT
	Cleanup(func())
}

// NewProccessorI creates a new instance of ProccessorI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProccessorI[T interface{}, K interface{}](t mockConstructorTestingTNewProccessorI) *ProccessorI[T, K] {
	mock := &ProccessorI[T, K]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
